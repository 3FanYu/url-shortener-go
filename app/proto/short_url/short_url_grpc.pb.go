// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: short_url/short_url.proto

package url_shortener_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortUrlClient is the client API for ShortUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlReq, opts ...grpc.CallOption) (*CreateShortUrlResp, error)
	RedirectShortUrl(ctx context.Context, in *RedirectShortUrlReq, opts ...grpc.CallOption) (*RedirectShortUrlResp, error)
}

type shortUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlClient(cc grpc.ClientConnInterface) ShortUrlClient {
	return &shortUrlClient{cc}
}

func (c *shortUrlClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlReq, opts ...grpc.CallOption) (*CreateShortUrlResp, error) {
	out := new(CreateShortUrlResp)
	err := c.cc.Invoke(ctx, "/short_url.ShortUrl/CreateShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) RedirectShortUrl(ctx context.Context, in *RedirectShortUrlReq, opts ...grpc.CallOption) (*RedirectShortUrlResp, error) {
	out := new(RedirectShortUrlResp)
	err := c.cc.Invoke(ctx, "/short_url.ShortUrl/RedirectShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlServer is the server API for ShortUrl service.
// All implementations must embed UnimplementedShortUrlServer
// for forward compatibility
type ShortUrlServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlReq) (*CreateShortUrlResp, error)
	RedirectShortUrl(context.Context, *RedirectShortUrlReq) (*RedirectShortUrlResp, error)
	mustEmbedUnimplementedShortUrlServer()
}

// UnimplementedShortUrlServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlServer struct {
}

func (UnimplementedShortUrlServer) CreateShortUrl(context.Context, *CreateShortUrlReq) (*CreateShortUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortUrlServer) RedirectShortUrl(context.Context, *RedirectShortUrlReq) (*RedirectShortUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectShortUrl not implemented")
}
func (UnimplementedShortUrlServer) mustEmbedUnimplementedShortUrlServer() {}

// UnsafeShortUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlServer will
// result in compilation errors.
type UnsafeShortUrlServer interface {
	mustEmbedUnimplementedShortUrlServer()
}

func RegisterShortUrlServer(s grpc.ServiceRegistrar, srv ShortUrlServer) {
	s.RegisterService(&ShortUrl_ServiceDesc, srv)
}

func _ShortUrl_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_url.ShortUrl/CreateShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).CreateShortUrl(ctx, req.(*CreateShortUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_RedirectShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectShortUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).RedirectShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_url.ShortUrl/RedirectShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).RedirectShortUrl(ctx, req.(*RedirectShortUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrl_ServiceDesc is the grpc.ServiceDesc for ShortUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "short_url.ShortUrl",
	HandlerType: (*ShortUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _ShortUrl_CreateShortUrl_Handler,
		},
		{
			MethodName: "RedirectShortUrl",
			Handler:    _ShortUrl_RedirectShortUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "short_url/short_url.proto",
}
