// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: short_url/short_url.proto

package url_shortener_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShortUrl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShortUrl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortUrl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShortUrlMultiError, or nil
// if none found.
func (m *ShortUrl) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortUrl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	// no validation rules for Url

	if len(errors) > 0 {
		return ShortUrlMultiError(errors)
	}

	return nil
}

// ShortUrlMultiError is an error wrapping multiple validation errors returned
// by ShortUrl.ValidateAll() if the designated constraints aren't met.
type ShortUrlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortUrlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortUrlMultiError) AllErrors() []error { return m }

// ShortUrlValidationError is the validation error returned by
// ShortUrl.Validate if the designated constraints aren't met.
type ShortUrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortUrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortUrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortUrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortUrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortUrlValidationError) ErrorName() string { return "ShortUrlValidationError" }

// Error satisfies the builtin error interface
func (e ShortUrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortUrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortUrlValidationError{}

// Validate checks the field values on CreateShortUrlReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateShortUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortUrlReqMultiError, or nil if none found.
func (m *CreateShortUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateShortUrlReqMultiError(errors)
	}

	return nil
}

// CreateShortUrlReqMultiError is an error wrapping multiple validation errors
// returned by CreateShortUrlReq.ValidateAll() if the designated constraints
// aren't met.
type CreateShortUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortUrlReqMultiError) AllErrors() []error { return m }

// CreateShortUrlReqValidationError is the validation error returned by
// CreateShortUrlReq.Validate if the designated constraints aren't met.
type CreateShortUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortUrlReqValidationError) ErrorName() string {
	return "CreateShortUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortUrlReqValidationError{}

// Validate checks the field values on CreateShortUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortUrlResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortUrlRespMultiError, or nil if none found.
func (m *CreateShortUrlResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortUrlResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShortUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShortUrlRespValidationError{
					field:  "ShortUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShortUrlRespValidationError{
					field:  "ShortUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShortUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShortUrlRespValidationError{
				field:  "ShortUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShortUrlRespMultiError(errors)
	}

	return nil
}

// CreateShortUrlRespMultiError is an error wrapping multiple validation errors
// returned by CreateShortUrlResp.ValidateAll() if the designated constraints
// aren't met.
type CreateShortUrlRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortUrlRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortUrlRespMultiError) AllErrors() []error { return m }

// CreateShortUrlRespValidationError is the validation error returned by
// CreateShortUrlResp.Validate if the designated constraints aren't met.
type CreateShortUrlRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortUrlRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortUrlRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortUrlRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortUrlRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortUrlRespValidationError) ErrorName() string {
	return "CreateShortUrlRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortUrlRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortUrlResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortUrlRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortUrlRespValidationError{}

// Validate checks the field values on RedirectToShortUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedirectToShortUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectToShortUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedirectToShortUrlReqMultiError, or nil if none found.
func (m *RedirectToShortUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectToShortUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return RedirectToShortUrlReqMultiError(errors)
	}

	return nil
}

// RedirectToShortUrlReqMultiError is an error wrapping multiple validation
// errors returned by RedirectToShortUrlReq.ValidateAll() if the designated
// constraints aren't met.
type RedirectToShortUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectToShortUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectToShortUrlReqMultiError) AllErrors() []error { return m }

// RedirectToShortUrlReqValidationError is the validation error returned by
// RedirectToShortUrlReq.Validate if the designated constraints aren't met.
type RedirectToShortUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectToShortUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectToShortUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectToShortUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectToShortUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectToShortUrlReqValidationError) ErrorName() string {
	return "RedirectToShortUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e RedirectToShortUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectToShortUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectToShortUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectToShortUrlReqValidationError{}

// Validate checks the field values on RedirectToShortUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedirectToShortUrlResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectToShortUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedirectToShortUrlRespMultiError, or nil if none found.
func (m *RedirectToShortUrlResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectToShortUrlResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return RedirectToShortUrlRespMultiError(errors)
	}

	return nil
}

// RedirectToShortUrlRespMultiError is an error wrapping multiple validation
// errors returned by RedirectToShortUrlResp.ValidateAll() if the designated
// constraints aren't met.
type RedirectToShortUrlRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectToShortUrlRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectToShortUrlRespMultiError) AllErrors() []error { return m }

// RedirectToShortUrlRespValidationError is the validation error returned by
// RedirectToShortUrlResp.Validate if the designated constraints aren't met.
type RedirectToShortUrlRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectToShortUrlRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectToShortUrlRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectToShortUrlRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectToShortUrlRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectToShortUrlRespValidationError) ErrorName() string {
	return "RedirectToShortUrlRespValidationError"
}

// Error satisfies the builtin error interface
func (e RedirectToShortUrlRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectToShortUrlResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectToShortUrlRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectToShortUrlRespValidationError{}
